<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Busca Binária</title>
    <link href="/Hexo-Portifolio/2024/05/09/binary-search-1/"/>
    <url>/Hexo-Portifolio/2024/05/09/binary-search-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Busca-binaria"><a href="#Busca-binaria" class="headerlink" title="Busca binária"></a>Busca binária</h1><br><p>Busca binária, é um algoritmo de busca de dados em um array ou lista que funciona repartindo o arranjo ao meio e comparando os resultados quantas vezes forem necessárias. Em outras palavras busca binária é como encontrar um número em um livro grosso, mas em vez de folhear página por página, você abre o livro na metade e vê se o número que você está procurando está na metade superior ou inferior. Se estiver na metade superior, você repete o processo nessa metade; se estiver na metade inferior, você faz o mesmo lá. Isso continua até encontrar o número ou perceber que não está no livro.</p><p>Um pré requisito para aplicar a busca binária, é que o arranjo deve estar ordenado, a ordem de separação da busca binária também deve seguir a ordem (crescente ou decrescente)</p><p>Implementação em Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_search</span>(<span class="hljs-params">simple_array, searched_element</span>):<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    len_array = <span class="hljs-built_in">len</span>(simple_array)<br><br>    <span class="hljs-keyword">if</span> len_array == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> simple_array[<span class="hljs-number">0</span>] != searched_element:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;O elemento não foi encontrado&quot;</span>)<br>      <span class="hljs-keyword">break</span><br><br>    middle_element = simple_array[len_array//<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> middle_element == searched_element:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;O elemento foi encontrado&quot;</span>)<br>      <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">elif</span> middle_element &lt; searched_element:<br>      simple_array = simple_array[len_array//<span class="hljs-number">2</span> + <span class="hljs-number">1</span>:]<br><br>    <span class="hljs-keyword">else</span>:<br>      simple_array = simple_array[:len_array//<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h2 id="Implementacao-unida-com-os-algoritmos-de-ordenacao"><a href="#Implementacao-unida-com-os-algoritmos-de-ordenacao" class="headerlink" title="Implementação unida com os algoritmos de ordenação"></a>Implementação unida com os algoritmos de ordenação</h2><p>A fim de unir o conhecimento a respeito da busca binária com os conceitos de algoritmos de ordenação, criei um notebook no Google Colaboratory, onde a busca binária será aplicada em conjunto com um dos algoritmos de ordenação, o funcionamento acontecerá da seguinte forma:</p><ul><li>O usuário poderá montar o array que deseja fazer a busca de elementos caso quiser, caso não, o array usado será gerado pelo algoritmo;</li><li>Após criar o array, o usuário pode escolher um dos 4 algoritmos de ordenação estudados (Bubble Sort, Selection Sort, Insertion Sort e Merge Sort) para ordenar seu array;</li><li>Após isso, será exibido o tempo gasto para ordenar o array, e o usuário poderá buscar por quantos elementos quiser em seu array.</li></ul><p>Você pode conferir o funcionamento deste algoritmo e realizar testes nele clicando neste notebook <a href="https://colab.research.google.com/drive/1VTFVm0ulEx44FPTrEXI_MTnie-GToGdf?usp=sharing">aqui</a></p>]]></content>
    
    
    <categories>
      
      <category>Tarefas de cálculo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pré Cálculo</tag>
      
      <tag>Busca de dados</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algoritmos de ordenação</title>
    <link href="/Hexo-Portifolio/2024/05/09/sort-algorithms/"/>
    <url>/Hexo-Portifolio/2024/05/09/sort-algorithms/</url>
    
    <content type="html"><![CDATA[<p>Algoritmos de ordenação, suas definições, prós, contras e implementação.</p><h1 id="Algoritmos-de-ordenacao"><a href="#Algoritmos-de-ordenacao" class="headerlink" title="Algoritmos de ordenação"></a>Algoritmos de ordenação</h1><br>Quando falamos sobre algoritmos de ordenação, nos referimos a um conjunto de operações com dados de um array ou lista de forma a organizá-los em uma ordem específica, existem várias maneiras de ordenar uma lista, alguns são mais estáveis, outros possuem performance melhor, ou realizam a ordenação de forma mais rápida<p>Dentre os algoritmos de ordenação, podemos destacar:</p><ul><li>Bubble Sort</li><li>Selection Sort</li><li>Insertion Sort</li><li>Merge Sort</li></ul><h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><p>O algoritmo bubble sort parte do início da lista comparando pares de elementos adjacentes e os troca se estiverem fora de ordem. Este processo é repetido para todos os n-1 elementos até que todos os elementos estejam na ordem correta.<br><img src="https://lh5.googleusercontent.com/6pdO_dPEbJirJGAOD8hxW9Z08YHPOBs-gxIeyNMcGlT2BkM-Q5xLmmuI2mBPNdEzhY4YPD0XqTrmidQU9WfSk7q5E5CKIzI2jqlI-cQ7SYfketq6cxUBy5Buu19mbu0JPEOeF5XzA1jRLXQLAYqylw" alt="Bubble Sort"></p><p>Implementação em Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">simple_array</span>):<br>  max_pos = <span class="hljs-built_in">len</span>(simple_array) - <span class="hljs-number">1</span><br>  count = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">while</span> max_pos &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">if</span> count &lt; max_pos:<br>      <span class="hljs-keyword">if</span> simple_array[count] &gt; simple_array[count + <span class="hljs-number">1</span>]:<br>        aux = simple_array[count]<br>        simple_array[count] = simple_array[count + <span class="hljs-number">1</span>]<br>        simple_array[count + <span class="hljs-number">1</span>] = aux<br><br>    <span class="hljs-keyword">if</span> count == max_pos:<br>      max_pos -= <span class="hljs-number">1</span><br>      count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>      count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>O algoritmo de ordenação por seleção funciona encontrando o menor elemento em uma lista não ordenada e movendo-o para a primeira posição. Isso é repetido em cada iteração, reduzindo o tamanho da lista não ordenada até que todos os elementos estejam em ordem.<br><img src="https://lh4.googleusercontent.com/enE2wUgG1T1d97BLoOUSHpIfmfddvclykTjRP2BrR_t-bq4UewLCTzJWRHbTxusL3o1rUsFo3lt9dO4MPIHo8LDcEaRpQ3XzNt6s8PR9fS8OubM_BlsAvJzLUMkP2zEpHcFhKh0Bk-DJLeWHGfcolHE" alt="Selection Sort"></p><p>Implementação em Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">simple_array</span>):<br>    n = <span class="hljs-built_in">len</span>(simple_array)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-comment"># Encontra o elemento mínimo no array.</span><br>        min_element = i<br>        <span class="hljs-comment"># compara o elemento na posição minimo com todos os outros i + 1 elementos</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> simple_array[min_element] &gt; simple_array[j]:<br>                min_element = j<br>        <span class="hljs-comment"># Coloca o elemento mínimo na posição correspondente.</span><br>        aux = simple_array[i]<br>        simple_array[i] = simple_array[min_element] <br>        simple_array[min_element] = aux<br></code></pre></td></tr></table></figure><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>O algoritmo de ordenação insertion sort funciona de forma iterativa, onde a lista é dividida em duas partes: uma parte ordenada e uma parte ainda não ordenada. Em cada iteração, o algoritmo pega um elemento da parte não ordenada e o insere na posição correta na parte ordenada, expandindo assim a seção ordenada da lista. Esse processo é repetido até que todos os elementos estejam na posição correta e a lista esteja totalmente ordenada.<br><img src="https://lh3.googleusercontent.com/2P85qKcwah9m_ukKOttKQNWxXa6owYfTTHZ2XYE9RAr5hdXfI0aRETmxOl1NiS6uoyWnizrMFV96H0p6bOSnfF05qapY89mJr4HezS9tNISVwZGREkFV12UFftlC6h2LmQno1K8NmD7hJZOSUQwmOw" alt="Insertion Sort"></p><p>Implementação em Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertion_sort</span>(<span class="hljs-params">simple_array</span>):<br>    n = <span class="hljs-built_in">len</span>(simple_array)<br><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        chave = simple_array[j]<br>        i = j - <span class="hljs-number">1</span><br>        <span class="hljs-comment"># Insere o elemento simple_array[j] na posição correta.</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> simple_array[i] &gt; chave:<br>            simple_array[i + <span class="hljs-number">1</span>] = simple_array[i]<br>            i = i - <span class="hljs-number">1</span><br>        simple_array[i + <span class="hljs-number">1</span>] = chave<br></code></pre></td></tr></table></figure><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>O Merge Sort é um algoritmo eficiente que divide a lista em subgrupos menores, ordena cada subgrupo e, em seguida, combina-os de forma ordenada até que a lista inteira esteja ordenada. Ele é conhecido por sua eficiência em lidar com grandes conjuntos de dados.<br><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*Cm0lz9sqD9EK8R6DJuzrHQ.png" alt="Merge Sort"></p><p>Implementação em Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">simple_array, aux, left, center, right</span>):<br>    <span class="hljs-comment"># Une dois vetores ordenados em um único vetor (também ordenado).</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(left, right + <span class="hljs-number">1</span>):<br>        aux[k] = simple_array[k]<br>    i = left<br>    j = center + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(left, right + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i &gt; center:<br>            simple_array[k] = aux[j]<br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> j &gt; right:<br>            simple_array[k] = aux[i]<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> aux[j] &lt; aux[i]:<br>            simple_array[k] = aux[j]<br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            simple_array[k] = aux[i]<br>            i += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">simple_array, aux, left, right</span>):<br>    <span class="hljs-keyword">if</span> right &lt;= left:<br>        <span class="hljs-keyword">return</span><br>    meio = (left + right) // <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># Ordena a primeira metade do array.</span><br>    merge_sort(simple_array, aux, left, meio)<br><br>    <span class="hljs-comment"># Ordena a segunda metade do array.</span><br>    merge_sort(simple_array, aux, meio + <span class="hljs-number">1</span>, right)<br><br>    <span class="hljs-comment"># Une as duas metades ordenadas anteriormente.</span><br>    merge(simple_array, aux, left, meio, right)<br></code></pre></td></tr></table></figure><h2 id="Complexidade-de-cada-algoritmo-de-ordenacao"><a href="#Complexidade-de-cada-algoritmo-de-ordenacao" class="headerlink" title="Complexidade de cada algoritmo de ordenação"></a>Complexidade de cada algoritmo de ordenação</h2><p>Cada algoritmo de ordenação opera de maneira diferente sobre os dados, sendo assim, cada um possui uma complexidade de execução diferente, a seguir temos uma tabela exibindo a complexidade na notação Big-O para cada caso de cada algoritmo de ordenação mencionado anteriormente</p><table><thead><tr><th>Algoritmo</th><th>Melhor caso</th><th>Caso médio</th><th>Pior caso</th></tr></thead><tbody><tr><td>Bubble Sort</td><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td></tr><tr><td>Selection Sort</td><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td></tr><tr><td>Insertion Sort</td><td>O(n)</td><td>O(n²)</td><td>O(n²)</td></tr><tr><td>Merge Sort</td><td>O(n<code>logn</code>n)</td><td>O(n<code>log</code>n)</td><td>O(n<code>log</code>n)</td></tr></tbody></table><h2 id="Ambiente-de-execucao-dos-algoritmos"><a href="#Ambiente-de-execucao-dos-algoritmos" class="headerlink" title="Ambiente de execução dos algoritmos"></a>Ambiente de execução dos algoritmos</h2><p>A fim de permitir que os algoritmos listados acima sejam executados e testados, criei um notebook no Google Colaboratory com cada um dos algoritmos ordenando um array aleatório, exibindo o array de entrada e o array de saída para cada caso.</p><p>Acesse ao Google Colaboratory para poder testar na prática os algoritmos implementados clicando <a href="https://colab.research.google.com/drive/19Krc5Q4iEmvzSWYK_1drKyoewGrG7jtB?usp=sharing">aqui</a></p>]]></content>
    
    
    <categories>
      
      <category>Tarefas de cálculo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pré Cálculo</tag>
      
      <tag>Ordenação</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
